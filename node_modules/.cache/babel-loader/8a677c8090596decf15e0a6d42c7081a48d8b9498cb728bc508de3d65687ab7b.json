{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\OneDrive - Universidad Autonoma de Occidente\\\\Personal\\\\Documentos personales\\\\Cursos\\\\Platzi\\\\Intro React.js\\\\react-intro-project\\\\src\\\\TodoContext\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\n\n// Creación de contexto para compartir el estado de las distintas \"generaciones\" de componentes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoContext = /*#__PURE__*/createContext();\nfunction TodoProvider(props) {\n  _s();\n  // Comentarios de teoría\n  /*\r\n  \"props\" nos permite obtener todas las propiedades que se le pasen al componente desde el index o el otro documento desde donde se esté llamando\r\n  Propiedades para obtener propiedades\r\n  props.nombreProp -> nos permite obtener la propiedad particular que requerimos.\r\n  props.children -> nos permite obtener los elementos hijos que se estén renderizando dentro del componente desde el otro documento.\r\n  */\n\n  // Uso del localStorage para el almacenamiento y la persistencia de los todoItems creados por el usuario.\n  // Recordar: JSON.stringify() permite pasar a texto cualquier tipo de dato o estructura para que pueda ser almacenado\n  // sin problema en el localStorage\n  // Recordar: JSON.parse() permite convertir a su tipo original cualquier tipo de dato o estructura que ya ha sido\n  // previamente \"stringifyado\"\n\n  const {\n    item: todos,\n    saveItem: saveTodos,\n    loading,\n    error\n  } = useLocalStorage('TODOS_V1', []);\n  const [searchValue, setSearchValue] = useState('');\n  const [openModal, setOpenModal] = useState(false);\n  const completedTodos = todos.filter(todo => !!todo.completed).length;\n  const totalTodos = todos.length;\n  let searchedTodos = [];\n\n  // Este condicional permite que, dependiendo del input que el usuario digite, se filtre el arreglo de todo's.\n  // Una vez se encuentran similitudes entre algún (o algunos) elemento(s) del arreglo, se muestran estos en la UI.\n  // Si no se está realizando ninguna búsqueda, ...\n  // ... se seguirán renderizando todos los elementos que estén actualmente en el array.\n\n  if (!searchValue.length >= 1) {\n    searchedTodos = todos;\n  } else {\n    searchedTodos = todos.filter(todo => {\n      const todoText = todo.text.toLowerCase();\n      const searchText = searchValue.toLowerCase();\n      return todoText.includes(searchText);\n    });\n  }\n\n  // FUNCIONES DE CRUD\n\n  const completeTodo = text => {\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n    const newTodos = [...todos];\n    // Forma corta de cambiar el estado 'completed' del TODO\n    todos[todoIndex].completed = true;\n\n    // Actualizar array de TODOs\n    saveTodos(newTodos);\n\n    // Forma larga\n    // todos[todoIndex] = {\n\n    //   text: todos[todoIndex.text],\n\n    //   completed: true,\n    // };\n  };\n\n  const addTodo = text => {\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n    const newTodos = [...todos];\n    // Forma corta de cambiar el estado 'completed' del TODO\n    todos[todoIndex].completed = true;\n\n    // Actualizar array de TODOs\n    saveTodos(newTodos);\n  };\n\n  // Función para eliminar TODOs\n\n  const deleteTodo = text => {\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n    const newTodos = [...todos];\n    newTodos.splice(todoIndex, 1); // Con el método splice() se especifica desde dónde se quiere dividir el array (primer param)\n    // y en cuantas cantidades (segundo param), para así (en este caso), eliminar el elemento específico del array.\n    saveTodos(newTodos);\n  };\n\n  // Manejo de efectos:\n  // El useEffect se ejecuta justo antes de que todos los componentes estén listos para renderizar.\n  // Cuando se quiere ejecutar justo después de que los componentes se renderizaron, se usa un useLayoutEffect\n\n  // console.log('Render (antes del use effect)')\n\n  // useEffect(() => {\n  //   console.log('use effect')\n  // }, [totalTodos])\n\n  // Cuando se envía un array vacío al final del useEffect, este solo se ejecuta la primera vez que la app renderiza, \n  // de lo contrario, se ejecutará cada vez que la app renderice.\n  // Si dentro del array se envía alguna variable específica, el useEffect se ejecutará cada vez que esta variable cambie\n\n  // console.log('Render (luego del use effect)')\n\n  return /*#__PURE__*/_jsxDEV(TodoContext.Provider, {\n    value: {\n      loading,\n      error,\n      totalTodos,\n      completedTodos,\n      searchValue,\n      setSearchValue,\n      searchedTodos,\n      completeTodo,\n      deleteTodo,\n      openModal,\n      setOpenModal\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n}\n_s(TodoProvider, \"obebbwRBz4KyEbfh+n0gAzxuzN0=\", false, function () {\n  return [useLocalStorage];\n});\n_c = TodoProvider;\nexport { TodoContext, TodoProvider };\nvar _c;\n$RefreshReg$(_c, \"TodoProvider\");","map":{"version":3,"names":["React","createContext","useState","useLocalStorage","TodoContext","TodoProvider","props","item","todos","saveItem","saveTodos","loading","error","searchValue","setSearchValue","openModal","setOpenModal","completedTodos","filter","todo","completed","length","totalTodos","searchedTodos","todoText","text","toLowerCase","searchText","includes","completeTodo","todoIndex","findIndex","newTodos","addTodo","deleteTodo","splice","children"],"sources":["C:/Users/Daniel/OneDrive - Universidad Autonoma de Occidente/Personal/Documentos personales/Cursos/Platzi/Intro React.js/react-intro-project/src/TodoContext/index.js"],"sourcesContent":["import React, { createContext, useState } from 'react'\r\nimport { useLocalStorage } from './useLocalStorage'\r\n\r\n// Creación de contexto para compartir el estado de las distintas \"generaciones\" de componentes\r\nconst TodoContext = createContext()\r\n\r\nfunction TodoProvider(props) {\r\n    // Comentarios de teoría\r\n    /*\r\n    \"props\" nos permite obtener todas las propiedades que se le pasen al componente desde el index o el otro documento desde donde se esté llamando\r\n    Propiedades para obtener propiedades\r\n    props.nombreProp -> nos permite obtener la propiedad particular que requerimos.\r\n    props.children -> nos permite obtener los elementos hijos que se estén renderizando dentro del componente desde el otro documento.\r\n    */\r\n\r\n    // Uso del localStorage para el almacenamiento y la persistencia de los todoItems creados por el usuario.\r\n    // Recordar: JSON.stringify() permite pasar a texto cualquier tipo de dato o estructura para que pueda ser almacenado\r\n    // sin problema en el localStorage\r\n    // Recordar: JSON.parse() permite convertir a su tipo original cualquier tipo de dato o estructura que ya ha sido\r\n    // previamente \"stringifyado\"\r\n\r\n    const {\r\n        item: todos,\r\n        saveItem: saveTodos,\r\n        loading,\r\n        error\r\n    } = useLocalStorage('TODOS_V1', [])\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [openModal, setOpenModal] = useState(false)\r\n\r\n    const completedTodos = todos.filter(todo => !!todo.completed).length\r\n    const totalTodos = todos.length\r\n\r\n    let searchedTodos = []\r\n\r\n    // Este condicional permite que, dependiendo del input que el usuario digite, se filtre el arreglo de todo's.\r\n    // Una vez se encuentran similitudes entre algún (o algunos) elemento(s) del arreglo, se muestran estos en la UI.\r\n    // Si no se está realizando ninguna búsqueda, ...\r\n    // ... se seguirán renderizando todos los elementos que estén actualmente en el array.\r\n\r\n    if (!searchValue.length >= 1) {\r\n        searchedTodos = todos\r\n    } else {\r\n        searchedTodos = todos.filter(todo => {\r\n            const todoText = todo.text.toLowerCase()\r\n            const searchText = searchValue.toLowerCase()\r\n            return todoText.includes(searchText)\r\n        })\r\n    }\r\n\r\n    // FUNCIONES DE CRUD\r\n\r\n    const completeTodo = (text) => {\r\n        const todoIndex = todos.findIndex(todo => todo.text === text)\r\n\r\n        const newTodos = [...todos]\r\n        // Forma corta de cambiar el estado 'completed' del TODO\r\n        todos[todoIndex].completed = true\r\n\r\n        // Actualizar array de TODOs\r\n        saveTodos(newTodos)\r\n\r\n        // Forma larga\r\n        // todos[todoIndex] = {\r\n\r\n        //   text: todos[todoIndex.text],\r\n\r\n        //   completed: true,\r\n        // };\r\n    }\r\n\r\n    const addTodo = (text) => {\r\n        const todoIndex = todos.findIndex(todo => todo.text === text)\r\n\r\n        const newTodos = [...todos]\r\n        // Forma corta de cambiar el estado 'completed' del TODO\r\n        todos[todoIndex].completed = true\r\n\r\n        // Actualizar array de TODOs\r\n        saveTodos(newTodos)\r\n    }\r\n\r\n    // Función para eliminar TODOs\r\n\r\n    const deleteTodo = (text) => {\r\n        const todoIndex = todos.findIndex(todo => todo.text === text)\r\n        const newTodos = [...todos]\r\n        newTodos.splice(todoIndex, 1) // Con el método splice() se especifica desde dónde se quiere dividir el array (primer param)\r\n        // y en cuantas cantidades (segundo param), para así (en este caso), eliminar el elemento específico del array.\r\n        saveTodos(newTodos)\r\n    }\r\n\r\n\r\n    // Manejo de efectos:\r\n    // El useEffect se ejecuta justo antes de que todos los componentes estén listos para renderizar.\r\n    // Cuando se quiere ejecutar justo después de que los componentes se renderizaron, se usa un useLayoutEffect\r\n\r\n    // console.log('Render (antes del use effect)')\r\n\r\n    // useEffect(() => {\r\n    //   console.log('use effect')\r\n    // }, [totalTodos])\r\n\r\n    // Cuando se envía un array vacío al final del useEffect, este solo se ejecuta la primera vez que la app renderiza, \r\n    // de lo contrario, se ejecutará cada vez que la app renderice.\r\n    // Si dentro del array se envía alguna variable específica, el useEffect se ejecutará cada vez que esta variable cambie\r\n\r\n    // console.log('Render (luego del use effect)')\r\n\r\n\r\n    return (\r\n        <TodoContext.Provider value={{\r\n            loading,\r\n            error,\r\n            totalTodos,\r\n            completedTodos,\r\n            searchValue,\r\n            setSearchValue,\r\n            searchedTodos,\r\n            completeTodo,\r\n            deleteTodo,\r\n            openModal,\r\n            setOpenModal\r\n        }}>\r\n            {props.children}\r\n        </TodoContext.Provider>\r\n    )\r\n}\r\n\r\nexport { TodoContext, TodoProvider }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}