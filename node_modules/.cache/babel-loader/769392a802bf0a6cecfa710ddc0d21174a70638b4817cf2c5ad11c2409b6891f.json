{"ast":null,"code":"import _toConsumableArray from\"C:/Users/Daniel/OneDrive - Universidad Autonoma de Occidente/Personal/Documentos personales/Cursos/Platzi/Intro React.js/react-intro-project/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"C:/Users/Daniel/OneDrive - Universidad Autonoma de Occidente/Personal/Documentos personales/Cursos/Platzi/Intro React.js/react-intro-project/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{createContext,useState}from'react';import{useLocalStorage}from'./useLocalStorage';// Creación de contexto para compartir el estado de las distintas \"generaciones\" de componentes\nimport{jsx as _jsx}from\"react/jsx-runtime\";var TodoContext=/*#__PURE__*/createContext();function TodoProvider(props){// Comentarios de teoría\n/*\r\n    \"props\" nos permite obtener todas las propiedades que se le pasen al componente desde el index o el otro documento desde donde se esté llamando\r\n    Propiedades para obtener propiedades\r\n    props.nombreProp -> nos permite obtener la propiedad particular que requerimos.\r\n    props.children -> nos permite obtener los elementos hijos que se estén renderizando dentro del componente desde el otro documento.\r\n    */ // Uso del localStorage para el almacenamiento y la persistencia de los todoItems creados por el usuario.\n// Recordar: JSON.stringify() permite pasar a texto cualquier tipo de dato o estructura para que pueda ser almacenado\n// sin problema en el localStorage\n// Recordar: JSON.parse() permite convertir a su tipo original cualquier tipo de dato o estructura que ya ha sido\n// previamente \"stringifyado\"\nvar _useLocalStorage=useLocalStorage('TODOS_V1',[]),todos=_useLocalStorage.item,saveTodos=_useLocalStorage.saveItem,loading=_useLocalStorage.loading,error=_useLocalStorage.error;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),searchValue=_useState2[0],setSearchValue=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),openModal=_useState4[0],setOpenModal=_useState4[1];var completedTodos=todos.filter(function(todo){return!!todo.completed;}).length;var totalTodos=todos.length;var searchedTodos=[];// Este condicional permite que, dependiendo del input que el usuario digite, se filtre el arreglo de todo's.\n// Una vez se encuentran similitudes entre algún (o algunos) elemento(s) del arreglo, se muestran estos en la UI.\n// Si no se está realizando ninguna búsqueda, ...\n// ... se seguirán renderizando todos los elementos que estén actualmente en el array.\nif(!searchValue.length>=1){searchedTodos=todos;}else{searchedTodos=todos.filter(function(todo){var todoText=todo.text.toLowerCase();var searchText=searchValue.toLowerCase();return todoText.includes(searchText);});}// FUNCIONES DE CRUD\nvar completeTodo=function completeTodo(text){var todoIndex=todos.findIndex(function(todo){return todo.text===text;});var newTodos=_toConsumableArray(todos);// Forma corta de cambiar el estado 'completed' del TODO\ntodos[todoIndex].completed=true;// Actualizar array de TODOs\nsaveTodos(newTodos);// Forma larga\n// todos[todoIndex] = {\n//   text: todos[todoIndex.text],\n//   completed: true,\n// };\n};var addTodo=function addTodo(text){var newTodos=_toConsumableArray(todos);newTodos.push({completed:false,text:text});saveTodos(newTodos);};// Función para eliminar TODOs\nvar deleteTodo=function deleteTodo(text){var todoIndex=todos.findIndex(function(todo){return todo.text===text;});var newTodos=_toConsumableArray(todos);newTodos.splice(todoIndex,1);// Con el método splice() se especifica desde dónde se quiere dividir el array (primer param)\n// y en cuantas cantidades (segundo param), para así (en este caso), eliminar el elemento específico del array.\nsaveTodos(newTodos);};// Manejo de efectos:\n// El useEffect se ejecuta justo antes de que todos los componentes estén listos para renderizar.\n// Cuando se quiere ejecutar justo después de que los componentes se renderizaron, se usa un useLayoutEffect\n// console.log('Render (antes del use effect)')\n// useEffect(() => {\n//   console.log('use effect')\n// }, [totalTodos])\n// Cuando se envía un array vacío al final del useEffect, este solo se ejecuta la primera vez que la app renderiza, \n// de lo contrario, se ejecutará cada vez que la app renderice.\n// Si dentro del array se envía alguna variable específica, el useEffect se ejecutará cada vez que esta variable cambie\n// console.log('Render (luego del use effect)')\nreturn/*#__PURE__*/_jsx(TodoContext.Provider,{value:{loading:loading,error:error,totalTodos:totalTodos,completedTodos:completedTodos,searchValue:searchValue,setSearchValue:setSearchValue,searchedTodos:searchedTodos,addTodo:addTodo,completeTodo:completeTodo,deleteTodo:deleteTodo,openModal:openModal,setOpenModal:setOpenModal},children:props.children});}export{TodoContext,TodoProvider};","map":{"version":3,"names":["React","createContext","useState","useLocalStorage","TodoContext","TodoProvider","props","todos","item","saveTodos","saveItem","loading","error","searchValue","setSearchValue","openModal","setOpenModal","completedTodos","filter","todo","completed","length","totalTodos","searchedTodos","todoText","text","toLowerCase","searchText","includes","completeTodo","todoIndex","findIndex","newTodos","addTodo","push","deleteTodo","splice","children"],"sources":["C:/Users/Daniel/OneDrive - Universidad Autonoma de Occidente/Personal/Documentos personales/Cursos/Platzi/Intro React.js/react-intro-project/src/TodoContext/index.js"],"sourcesContent":["import React, { createContext, useState } from 'react'\r\nimport { useLocalStorage } from './useLocalStorage'\r\n\r\n// Creación de contexto para compartir el estado de las distintas \"generaciones\" de componentes\r\nconst TodoContext = createContext()\r\n\r\nfunction TodoProvider(props) {\r\n    // Comentarios de teoría\r\n    /*\r\n    \"props\" nos permite obtener todas las propiedades que se le pasen al componente desde el index o el otro documento desde donde se esté llamando\r\n    Propiedades para obtener propiedades\r\n    props.nombreProp -> nos permite obtener la propiedad particular que requerimos.\r\n    props.children -> nos permite obtener los elementos hijos que se estén renderizando dentro del componente desde el otro documento.\r\n    */\r\n\r\n    // Uso del localStorage para el almacenamiento y la persistencia de los todoItems creados por el usuario.\r\n    // Recordar: JSON.stringify() permite pasar a texto cualquier tipo de dato o estructura para que pueda ser almacenado\r\n    // sin problema en el localStorage\r\n    // Recordar: JSON.parse() permite convertir a su tipo original cualquier tipo de dato o estructura que ya ha sido\r\n    // previamente \"stringifyado\"\r\n\r\n    const {\r\n        item: todos,\r\n        saveItem: saveTodos,\r\n        loading,\r\n        error\r\n    } = useLocalStorage('TODOS_V1', [])\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [openModal, setOpenModal] = useState(false)\r\n\r\n    const completedTodos = todos.filter(todo => !!todo.completed).length\r\n    const totalTodos = todos.length\r\n\r\n    let searchedTodos = []\r\n\r\n    // Este condicional permite que, dependiendo del input que el usuario digite, se filtre el arreglo de todo's.\r\n    // Una vez se encuentran similitudes entre algún (o algunos) elemento(s) del arreglo, se muestran estos en la UI.\r\n    // Si no se está realizando ninguna búsqueda, ...\r\n    // ... se seguirán renderizando todos los elementos que estén actualmente en el array.\r\n\r\n    if (!searchValue.length >= 1) {\r\n        searchedTodos = todos\r\n    } else {\r\n        searchedTodos = todos.filter(todo => {\r\n            const todoText = todo.text.toLowerCase()\r\n            const searchText = searchValue.toLowerCase()\r\n            return todoText.includes(searchText)\r\n        })\r\n    }\r\n\r\n    // FUNCIONES DE CRUD\r\n\r\n    const completeTodo = (text) => {\r\n        const todoIndex = todos.findIndex(todo => todo.text === text)\r\n\r\n        const newTodos = [...todos]\r\n        // Forma corta de cambiar el estado 'completed' del TODO\r\n        todos[todoIndex].completed = true\r\n\r\n        // Actualizar array de TODOs\r\n        saveTodos(newTodos)\r\n\r\n        // Forma larga\r\n        // todos[todoIndex] = {\r\n\r\n        //   text: todos[todoIndex.text],\r\n\r\n        //   completed: true,\r\n        // };\r\n    }\r\n\r\n    const addTodo = (text) => {\r\n        const newTodos = [...todos]\r\n        newTodos.push({\r\n            completed: false,\r\n            text,\r\n        })\r\n        saveTodos(newTodos)\r\n    }\r\n\r\n    // Función para eliminar TODOs\r\n\r\n    const deleteTodo = (text) => {\r\n        const todoIndex = todos.findIndex(todo => todo.text === text)\r\n        const newTodos = [...todos]\r\n        newTodos.splice(todoIndex, 1) // Con el método splice() se especifica desde dónde se quiere dividir el array (primer param)\r\n        // y en cuantas cantidades (segundo param), para así (en este caso), eliminar el elemento específico del array.\r\n        saveTodos(newTodos)\r\n    }\r\n\r\n\r\n    // Manejo de efectos:\r\n    // El useEffect se ejecuta justo antes de que todos los componentes estén listos para renderizar.\r\n    // Cuando se quiere ejecutar justo después de que los componentes se renderizaron, se usa un useLayoutEffect\r\n\r\n    // console.log('Render (antes del use effect)')\r\n\r\n    // useEffect(() => {\r\n    //   console.log('use effect')\r\n    // }, [totalTodos])\r\n\r\n    // Cuando se envía un array vacío al final del useEffect, este solo se ejecuta la primera vez que la app renderiza, \r\n    // de lo contrario, se ejecutará cada vez que la app renderice.\r\n    // Si dentro del array se envía alguna variable específica, el useEffect se ejecutará cada vez que esta variable cambie\r\n\r\n    // console.log('Render (luego del use effect)')\r\n\r\n\r\n    return (\r\n        <TodoContext.Provider value={{\r\n            loading,\r\n            error,\r\n            totalTodos,\r\n            completedTodos,\r\n            searchValue,\r\n            setSearchValue,\r\n            searchedTodos,\r\n            addTodo,\r\n            completeTodo,\r\n            deleteTodo,\r\n            openModal,\r\n            setOpenModal\r\n        }}>\r\n            {props.children}\r\n        </TodoContext.Provider>\r\n    )\r\n}\r\n\r\nexport { TodoContext, TodoProvider }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}