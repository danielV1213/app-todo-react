{"ast":null,"code":"import _slicedToArray from\"C:/Users/Daniel/Documents/Personal local/JobFolder/Portfolio projects/react-intro-project/react-todo-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";// Creación de un custom react hook para el localStorage\n// Este hook funciona con cualquier tipo de dato que se quiera setear en el localStorage\n// la diferencia es que, a la hora de usarlo, tendremos que pasarle dos valores (nombre -> key, tipo de dato -> value)\n// Es decir: const [estilo, setEstilo] = useLocalStorage('ESTILO_V1', {})\nfunction useLocalStorage(itemName,initialValue){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),error=_useState2[0],setError=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),loading=_useState4[0],setLoading=_useState4[1];var _useState5=useState(initialValue),_useState6=_slicedToArray(_useState5,2),item=_useState6[0],setItem=_useState6[1];// Aquí estamos usando el useEffect para simular que se está trayendo info de una API\n// Lo que se hace es que, con el setTimeout, no se ejecuta el código del custom hook, hasta dentro de 1000ms (1s)\nuseEffect(function(){setTimeout(function(){try{var localStorageItem=localStorage.getItem(itemName);var parsedItem;if(!localStorageItem){localStorage.setItem(itemName,JSON.stringify(initialValue));// En caso de que no existan todo's previamente, se setea por defecto un array vacío.\nparsedItem=initialValue;}else{parsedItem=JSON.parse(localStorageItem);// En caso de que existan, se transforman en arreglo de nuevo.\n}setItem(parsedItem);setLoading(false);}catch(error){setError(error);}},2000);});// Función para marcar los TODOs como completados\nvar saveItem=function saveItem(newItem){try{var stringifiedItem=JSON.stringify(newItem);localStorage.setItem(itemName,stringifiedItem);setItem(newItem);}catch(error){setError(error);}};return{item:item,saveItem:saveItem,loading:loading,error:error};}export{useLocalStorage};","map":{"version":3,"names":["React","useEffect","useState","useLocalStorage","itemName","initialValue","error","setError","loading","setLoading","item","setItem","setTimeout","localStorageItem","localStorage","getItem","parsedItem","JSON","stringify","parse","saveItem","newItem","stringifiedItem"],"sources":["C:/Users/Daniel/Documents/Personal local/JobFolder/Portfolio projects/react-intro-project/react-todo-app/src/TodoContext/useLocalStorage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\n// Creación de un custom react hook para el localStorage\r\n// Este hook funciona con cualquier tipo de dato que se quiera setear en el localStorage\r\n// la diferencia es que, a la hora de usarlo, tendremos que pasarle dos valores (nombre -> key, tipo de dato -> value)\r\n// Es decir: const [estilo, setEstilo] = useLocalStorage('ESTILO_V1', {})\r\n\r\nfunction useLocalStorage(itemName, initialValue) {\r\n    const [error, setError] = useState(false)\r\n    const [loading, setLoading] = useState(true)\r\n    const [item, setItem] = useState(initialValue)\r\n\r\n    // Aquí estamos usando el useEffect para simular que se está trayendo info de una API\r\n    // Lo que se hace es que, con el setTimeout, no se ejecuta el código del custom hook, hasta dentro de 1000ms (1s)\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            try {\r\n                const localStorageItem = localStorage.getItem(itemName)\r\n                let parsedItem\r\n\r\n                if (!localStorageItem) {\r\n                    localStorage.setItem(itemName, JSON.stringify(initialValue)) // En caso de que no existan todo's previamente, se setea por defecto un array vacío.\r\n                    parsedItem = initialValue\r\n                } else {\r\n                    parsedItem = JSON.parse(localStorageItem) // En caso de que existan, se transforman en arreglo de nuevo.\r\n                }\r\n\r\n                setItem(parsedItem)\r\n                setLoading(false)\r\n            } catch (error) {\r\n                setError(error)\r\n            }\r\n        }, 2000)\r\n    })\r\n\r\n    // Función para marcar los TODOs como completados\r\n\r\n    const saveItem = (newItem) => {\r\n        try {\r\n            const stringifiedItem = JSON.stringify(newItem)\r\n            localStorage.setItem(itemName, stringifiedItem)\r\n            setItem(newItem)\r\n        } catch (error) {\r\n            setError(error)\r\n        }\r\n    }\r\n\r\n    return {\r\n        item,\r\n        saveItem,\r\n        loading,\r\n        error,\r\n    }\r\n}\r\n\r\nexport { useLocalStorage }"],"mappings":"8LAAA,MAAOA,MAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAElD;AACA;AACA;AACA;AAEA,QAASC,gBAAe,CAACC,QAAQ,CAAEC,YAAY,CAAE,CAC7C,cAA0BH,QAAQ,CAAC,KAAK,CAAC,wCAAlCI,KAAK,eAAEC,QAAQ,eACtB,eAA8BL,QAAQ,CAAC,IAAI,CAAC,yCAArCM,OAAO,eAAEC,UAAU,eAC1B,eAAwBP,QAAQ,CAACG,YAAY,CAAC,yCAAvCK,IAAI,eAAEC,OAAO,eAEpB;AACA;AACAV,SAAS,CAAC,UAAM,CACZW,UAAU,CAAC,UAAM,CACb,GAAI,CACA,GAAMC,iBAAgB,CAAGC,YAAY,CAACC,OAAO,CAACX,QAAQ,CAAC,CACvD,GAAIY,WAAU,CAEd,GAAI,CAACH,gBAAgB,CAAE,CACnBC,YAAY,CAACH,OAAO,CAACP,QAAQ,CAAEa,IAAI,CAACC,SAAS,CAACb,YAAY,CAAC,CAAC,CAAC;AAC7DW,UAAU,CAAGX,YAAY,CAC7B,CAAC,IAAM,CACHW,UAAU,CAAGC,IAAI,CAACE,KAAK,CAACN,gBAAgB,CAAC,CAAC;AAC9C,CAEAF,OAAO,CAACK,UAAU,CAAC,CACnBP,UAAU,CAAC,KAAK,CAAC,CACrB,CAAE,MAAOH,KAAK,CAAE,CACZC,QAAQ,CAACD,KAAK,CAAC,CACnB,CACJ,CAAC,CAAE,IAAI,CAAC,CACZ,CAAC,CAAC,CAEF;AAEA,GAAMc,SAAQ,CAAG,QAAXA,SAAQ,CAAIC,OAAO,CAAK,CAC1B,GAAI,CACA,GAAMC,gBAAe,CAAGL,IAAI,CAACC,SAAS,CAACG,OAAO,CAAC,CAC/CP,YAAY,CAACH,OAAO,CAACP,QAAQ,CAAEkB,eAAe,CAAC,CAC/CX,OAAO,CAACU,OAAO,CAAC,CACpB,CAAE,MAAOf,KAAK,CAAE,CACZC,QAAQ,CAACD,KAAK,CAAC,CACnB,CACJ,CAAC,CAED,MAAO,CACHI,IAAI,CAAJA,IAAI,CACJU,QAAQ,CAARA,QAAQ,CACRZ,OAAO,CAAPA,OAAO,CACPF,KAAK,CAALA,KACJ,CAAC,CACL,CAEA,OAASH,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}