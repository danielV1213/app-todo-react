{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\OneDrive - Universidad Autonoma de Occidente\\\\Personal\\\\Documentos personales\\\\Cursos\\\\Platzi\\\\Intro React.js\\\\react-intro-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport { AppUI } from \"./AppUI\";\n\n// const defaultTodos = [\n//   { text: 'Cortar cebolla', completed: true },\n//   { text: 'Tomar el curso de intro a React.js', completed: true },\n//   { text: 'Hacer ejercicio', completed: false },\n//   { text: 'Trapear la casa', completed: false },\n// ]\n\n// Creación de un custom react hook para el localStorage\n// Este hook funciona con cualquier tipo de dato que se quiera setear en el localStorage\n// la diferencia es que, a la hora de usarlo, tendremos que pasarle dos valores (nombre -> key, tipo de dato -> value)\n// Es decir: const [estilo, setEstilo] = useLocalStorage('ESTILO_V1', {})\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction useLocalStorage(itemName, initialValue) {\n  _s();\n  // Aquí estamos usando el useEffect para simular que se está trayendo info de una API\n  // Lo que se hace es que, con el setTimeout, los \n  useEffect(() => {\n    setTimeout(() => {}, 1000);\n  });\n  const localStorageItem = localStorage.getItem(itemName);\n  let parsedItem;\n  if (!localStorageItem) {\n    localStorage.setItem(itemName, JSON.stringify(initialValue)); // En caso de que no existan todo's previamente, se setea por defecto un array vacío.\n    parsedItem = initialValue;\n  } else {\n    parsedItem = JSON.parse(localStorageItem); // En caso de que existan, se transforman en arreglo de nuevo.\n  }\n\n  const [item, setItem] = useState(parsedItem);\n\n  // Función para marcar los TODOs como completados\n\n  const saveItem = newItem => {\n    const stringifiedItem = JSON.stringify(newItem);\n    localStorage.setItem(itemName, stringifiedItem);\n    setItem(newItem);\n  };\n  return [item, saveItem];\n}\n_s(useLocalStorage, \"+epmJhChDo24VgzeQ6iWhFzLXXY=\");\nfunction App() {\n  _s2();\n  // Comentarios de teoría\n  /*\n  \"props\" nos permite obtener todas las propiedades que se le pasen al componente desde el index o el otro documento desde donde se esté llamando\n  Propiedades para obtener propiedades\n  props.nombreProp -> nos permite obtener la propiedad particular que requerimos.\n  props.children -> nos permite obtener los elementos hijos que se estén renderizando dentro del componente desde el otro documento.\n  */\n\n  // Uso del localStorage para el almacenamiento y la persistencia de los todoItems creados por el usuario.\n  // Recordar: JSON.stringify() permite pasar a texto cualquier tipo de dato o estructura para que pueda ser almacenado\n  // sin problema en el localStorage\n  // Recordar: JSON.parse() permite convertir a su tipo original cualquier tipo de dato o estructura que ya ha sido\n  // previamente \"stringifyado\"\n\n  const [todos, saveTodos] = useLocalStorage('TODOS_V1', []);\n  const [searchValue, setSearchValue] = useState('');\n  const completedTodos = todos.filter(todo => !!todo.completed).length;\n  const totalTodos = todos.length;\n  let searchedTodos = [];\n\n  // Este condicional permite que, dependiendo del input que el usuario digite, se filtre el arreglo de todo's.\n  // Una vez se encuentran similitudes entre algún (o algunos) elemento(s) del arreglo, se muestran estos en la UI.\n  // Si no se está realizando ninguna búsqueda, ...\n  // ... se seguirán renderizando todos los elementos que estén actualmente en el array.\n\n  if (!searchValue.length >= 1) {\n    searchedTodos = todos;\n  } else {\n    searchedTodos = todos.filter(todo => {\n      const todoText = todo.text.toLowerCase();\n      const searchText = searchValue.toLowerCase();\n      return todoText.includes(searchText);\n    });\n  }\n  const completeTodo = text => {\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n    const newTodos = [...todos];\n    // Forma corta de cambiar el estado 'completed' del TODO\n    todos[todoIndex].completed = true;\n\n    // Actualizar array de TODOs\n    saveTodos(newTodos);\n\n    // Forma larga\n    // todos[todoIndex] = {\n\n    //   text: todos[todoIndex.text],\n\n    //   completed: true,\n    // };\n  };\n\n  // Función para eliminar TODOs\n\n  const deleteTodo = text => {\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n    const newTodos = [...todos];\n    newTodos.splice(todoIndex, 1); // Con el método splice() se especifica desde dónde se quiere dividir el array (primer param)\n    // y en cuantas cantidades (segundo param), para así (en este caso), eliminar el elemento específico del array.\n    saveTodos(newTodos);\n  };\n\n  // Manejo de efectos:\n  // El useEffect se ejecuta justo antes de que todos los componentes estén listos para renderizar.\n  // Cuando se quiere ejecutar justo después de que los componentes se renderizaron, se usa un useLayoutEffect\n\n  // console.log('Render (antes del use effect)')\n\n  // useEffect(() => {\n  //   console.log('use effect')\n  // }, [totalTodos])\n\n  // Cuando se envía un array vacío al final del useEffect, este solo se ejecuta la primera vez que la app renderiza, \n  // de lo contrario, se ejecutará cada vez que la app renderice.\n  // Si dentro del array se envía alguna variable específica, el useEffect se ejecutará cada vez que esta variable cambie\n\n  // console.log('Render (luego del use effect)')\n\n  return /*#__PURE__*/_jsxDEV(AppUI, {\n    totalTodos: totalTodos,\n    completedTodos: completedTodos,\n    searchValue: searchValue,\n    setSearchValue: setSearchValue,\n    searchedTodos: searchedTodos,\n    completeTodo: completeTodo,\n    deleteTodo: deleteTodo\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"EYsrDwfpGttiZWPU2ClZtw5M6YA=\", false, function () {\n  return [useLocalStorage];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","AppUI","useLocalStorage","itemName","initialValue","setTimeout","localStorageItem","localStorage","getItem","parsedItem","setItem","JSON","stringify","parse","item","saveItem","newItem","stringifiedItem","App","todos","saveTodos","searchValue","setSearchValue","completedTodos","filter","todo","completed","length","totalTodos","searchedTodos","todoText","text","toLowerCase","searchText","includes","completeTodo","todoIndex","findIndex","newTodos","deleteTodo","splice"],"sources":["C:/Users/Daniel/OneDrive - Universidad Autonoma de Occidente/Personal/Documentos personales/Cursos/Platzi/Intro React.js/react-intro-project/src/App.js"],"sourcesContent":["// import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport { AppUI } from \"./AppUI\";\n\n// const defaultTodos = [\n//   { text: 'Cortar cebolla', completed: true },\n//   { text: 'Tomar el curso de intro a React.js', completed: true },\n//   { text: 'Hacer ejercicio', completed: false },\n//   { text: 'Trapear la casa', completed: false },\n// ]\n\n// Creación de un custom react hook para el localStorage\n// Este hook funciona con cualquier tipo de dato que se quiera setear en el localStorage\n// la diferencia es que, a la hora de usarlo, tendremos que pasarle dos valores (nombre -> key, tipo de dato -> value)\n// Es decir: const [estilo, setEstilo] = useLocalStorage('ESTILO_V1', {})\n\nfunction useLocalStorage(itemName, initialValue) {\n  // Aquí estamos usando el useEffect para simular que se está trayendo info de una API\n  // Lo que se hace es que, con el setTimeout, los \n  useEffect(() => {\n    setTimeout(() => {\n\n    }, 1000)\n  })\n\n  const localStorageItem = localStorage.getItem(itemName)\n  let parsedItem\n\n  if (!localStorageItem) {\n    localStorage.setItem(itemName, JSON.stringify(initialValue)) // En caso de que no existan todo's previamente, se setea por defecto un array vacío.\n    parsedItem = initialValue\n  } else {\n    parsedItem = JSON.parse(localStorageItem) // En caso de que existan, se transforman en arreglo de nuevo.\n  }\n\n  const [item, setItem] = useState(parsedItem)\n\n  // Función para marcar los TODOs como completados\n\n  const saveItem = (newItem) => {\n    const stringifiedItem = JSON.stringify(newItem)\n    localStorage.setItem(itemName, stringifiedItem)\n    setItem(newItem)\n  }\n\n  return [\n    item,\n    saveItem,\n  ]\n}\n\nfunction App() {\n  // Comentarios de teoría\n  /*\n  \"props\" nos permite obtener todas las propiedades que se le pasen al componente desde el index o el otro documento desde donde se esté llamando\n  Propiedades para obtener propiedades\n  props.nombreProp -> nos permite obtener la propiedad particular que requerimos.\n  props.children -> nos permite obtener los elementos hijos que se estén renderizando dentro del componente desde el otro documento.\n  */\n\n  // Uso del localStorage para el almacenamiento y la persistencia de los todoItems creados por el usuario.\n  // Recordar: JSON.stringify() permite pasar a texto cualquier tipo de dato o estructura para que pueda ser almacenado\n  // sin problema en el localStorage\n  // Recordar: JSON.parse() permite convertir a su tipo original cualquier tipo de dato o estructura que ya ha sido\n  // previamente \"stringifyado\"\n\n  const [todos, saveTodos] = useLocalStorage('TODOS_V1', [])\n\n  const [searchValue, setSearchValue] = useState('')\n\n  const completedTodos = todos.filter(todo => !!todo.completed).length\n  const totalTodos = todos.length\n\n  let searchedTodos = []\n\n  // Este condicional permite que, dependiendo del input que el usuario digite, se filtre el arreglo de todo's.\n  // Una vez se encuentran similitudes entre algún (o algunos) elemento(s) del arreglo, se muestran estos en la UI.\n  // Si no se está realizando ninguna búsqueda, ...\n  // ... se seguirán renderizando todos los elementos que estén actualmente en el array.\n\n  if (!searchValue.length >= 1) {\n    searchedTodos = todos\n  } else {\n    searchedTodos = todos.filter(todo => {\n      const todoText = todo.text.toLowerCase()\n      const searchText = searchValue.toLowerCase()\n      return todoText.includes(searchText)\n    })\n  }\n\n  const completeTodo = (text) => {\n    const todoIndex = todos.findIndex(todo => todo.text === text)\n\n    const newTodos = [...todos]\n    // Forma corta de cambiar el estado 'completed' del TODO\n    todos[todoIndex].completed = true\n\n    // Actualizar array de TODOs\n    saveTodos(newTodos)\n\n    // Forma larga\n    // todos[todoIndex] = {\n\n    //   text: todos[todoIndex.text],\n\n    //   completed: true,\n    // };\n  }\n\n  // Función para eliminar TODOs\n\n  const deleteTodo = (text) => {\n    const todoIndex = todos.findIndex(todo => todo.text === text)\n    const newTodos = [...todos]\n    newTodos.splice(todoIndex, 1) // Con el método splice() se especifica desde dónde se quiere dividir el array (primer param)\n    // y en cuantas cantidades (segundo param), para así (en este caso), eliminar el elemento específico del array.\n    saveTodos(newTodos)\n  }\n\n\n  // Manejo de efectos:\n  // El useEffect se ejecuta justo antes de que todos los componentes estén listos para renderizar.\n  // Cuando se quiere ejecutar justo después de que los componentes se renderizaron, se usa un useLayoutEffect\n\n  // console.log('Render (antes del use effect)')\n\n  // useEffect(() => {\n  //   console.log('use effect')\n  // }, [totalTodos])\n\n  // Cuando se envía un array vacío al final del useEffect, este solo se ejecuta la primera vez que la app renderiza, \n  // de lo contrario, se ejecutará cada vez que la app renderice.\n  // Si dentro del array se envía alguna variable específica, el useEffect se ejecutará cada vez que esta variable cambie\n\n  // console.log('Render (luego del use effect)')\n\n\n  return (\n    <AppUI\n      totalTodos={totalTodos}\n      completedTodos={completedTodos}\n      searchValue={searchValue}\n      setSearchValue={setSearchValue}\n      searchedTodos={searchedTodos}\n      completeTodo={completeTodo}\n      deleteTodo={deleteTodo}\n    />\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}