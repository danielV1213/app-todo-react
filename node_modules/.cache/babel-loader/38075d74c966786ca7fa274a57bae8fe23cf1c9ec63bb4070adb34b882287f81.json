{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n\n// Creación de un custom react hook para el localStorage\n// Este hook funciona con cualquier tipo de dato que se quiera setear en el localStorage\n// la diferencia es que, a la hora de usarlo, tendremos que pasarle dos valores (nombre -> key, tipo de dato -> value)\n// Es decir: const [estilo, setEstilo] = useLocalStorage('ESTILO_V1', {})\n\nfunction useLocalStorage(itemName, initialValue) {\n  _s();\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [item, setItem] = useState(initialValue);\n\n  // Aquí estamos usando el useEffect para simular que se está trayendo info de una API\n  // Lo que se hace es que, con el setTimeout, no se ejecuta el código del custom hook, hasta dentro de 1000ms (1s)\n  useEffect(() => {\n    setTimeout(() => {\n      try {\n        const localStorageItem = localStorage.getItem(itemName);\n        let parsedItem;\n        if (!localStorageItem) {\n          localStorage.setItem(itemName, JSON.stringify(initialValue)); // En caso de que no existan todo's previamente, se setea por defecto un array vacío.\n          parsedItem = initialValue;\n        } else {\n          parsedItem = JSON.parse(localStorageItem); // En caso de que existan, se transforman en arreglo de nuevo.\n        }\n\n        setItem(parsedItem);\n        setLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    }, 3000);\n  });\n\n  // Función para marcar los TODOs como completados\n\n  const saveItem = newItem => {\n    try {\n      const stringifiedItem = JSON.stringify(newItem);\n      localStorage.setItem(itemName, stringifiedItem);\n      setItem(newItem);\n    } catch (error) {\n      setError(error);\n    }\n  };\n  return {\n    item,\n    saveItem,\n    loading,\n    error\n  };\n}\n_s(useLocalStorage, \"sd/jOzXoKWa10AnxNJGXHNbuvYQ=\");\nexport { useLocalStorage };","map":{"version":3,"names":["React","useEffect","useState","useLocalStorage","itemName","initialValue","error","setError","loading","setLoading","item","setItem","setTimeout","localStorageItem","localStorage","getItem","parsedItem","JSON","stringify","parse","saveItem","newItem","stringifiedItem"],"sources":["C:/Users/Daniel/OneDrive - Universidad Autonoma de Occidente/Personal/Documentos personales/Cursos/Platzi/Intro React.js/react-intro-project/src/TodoContext/useLocalStorage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\n// Creación de un custom react hook para el localStorage\r\n// Este hook funciona con cualquier tipo de dato que se quiera setear en el localStorage\r\n// la diferencia es que, a la hora de usarlo, tendremos que pasarle dos valores (nombre -> key, tipo de dato -> value)\r\n// Es decir: const [estilo, setEstilo] = useLocalStorage('ESTILO_V1', {})\r\n\r\nfunction useLocalStorage(itemName, initialValue) {\r\n    const [error, setError] = useState(false)\r\n    const [loading, setLoading] = useState(true)\r\n    const [item, setItem] = useState(initialValue)\r\n\r\n    // Aquí estamos usando el useEffect para simular que se está trayendo info de una API\r\n    // Lo que se hace es que, con el setTimeout, no se ejecuta el código del custom hook, hasta dentro de 1000ms (1s)\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            try {\r\n                const localStorageItem = localStorage.getItem(itemName)\r\n                let parsedItem\r\n\r\n                if (!localStorageItem) {\r\n                    localStorage.setItem(itemName, JSON.stringify(initialValue)) // En caso de que no existan todo's previamente, se setea por defecto un array vacío.\r\n                    parsedItem = initialValue\r\n                } else {\r\n                    parsedItem = JSON.parse(localStorageItem) // En caso de que existan, se transforman en arreglo de nuevo.\r\n                }\r\n\r\n                setItem(parsedItem)\r\n                setLoading(false)\r\n            } catch (error) {\r\n                setError(error)\r\n            }\r\n        }, 3000)\r\n    })\r\n\r\n    // Función para marcar los TODOs como completados\r\n\r\n    const saveItem = (newItem) => {\r\n        try {\r\n            const stringifiedItem = JSON.stringify(newItem)\r\n            localStorage.setItem(itemName, stringifiedItem)\r\n            setItem(newItem)\r\n        } catch (error) {\r\n            setError(error)\r\n        }\r\n    }\r\n\r\n    return {\r\n        item,\r\n        saveItem,\r\n        loading,\r\n        error,\r\n    }\r\n}\r\n\r\nexport { useLocalStorage }"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAElD;AACA;AACA;AACA;;AAEA,SAASC,eAAe,CAACC,QAAQ,EAAEC,YAAY,EAAE;EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAACG,YAAY,CAAC;;EAE9C;EACA;EACAJ,SAAS,CAAC,MAAM;IACZW,UAAU,CAAC,MAAM;MACb,IAAI;QACA,MAAMC,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAACX,QAAQ,CAAC;QACvD,IAAIY,UAAU;QAEd,IAAI,CAACH,gBAAgB,EAAE;UACnBC,YAAY,CAACH,OAAO,CAACP,QAAQ,EAAEa,IAAI,CAACC,SAAS,CAACb,YAAY,CAAC,CAAC,EAAC;UAC7DW,UAAU,GAAGX,YAAY;QAC7B,CAAC,MAAM;UACHW,UAAU,GAAGC,IAAI,CAACE,KAAK,CAACN,gBAAgB,CAAC,EAAC;QAC9C;;QAEAF,OAAO,CAACK,UAAU,CAAC;QACnBP,UAAU,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAOH,KAAK,EAAE;QACZC,QAAQ,CAACD,KAAK,CAAC;MACnB;IACJ,CAAC,EAAE,IAAI,CAAC;EACZ,CAAC,CAAC;;EAEF;;EAEA,MAAMc,QAAQ,GAAIC,OAAO,IAAK;IAC1B,IAAI;MACA,MAAMC,eAAe,GAAGL,IAAI,CAACC,SAAS,CAACG,OAAO,CAAC;MAC/CP,YAAY,CAACH,OAAO,CAACP,QAAQ,EAAEkB,eAAe,CAAC;MAC/CX,OAAO,CAACU,OAAO,CAAC;IACpB,CAAC,CAAC,OAAOf,KAAK,EAAE;MACZC,QAAQ,CAACD,KAAK,CAAC;IACnB;EACJ,CAAC;EAED,OAAO;IACHI,IAAI;IACJU,QAAQ;IACRZ,OAAO;IACPF;EACJ,CAAC;AACL;AAAC,GA9CQH,eAAe;AAgDxB,SAASA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}