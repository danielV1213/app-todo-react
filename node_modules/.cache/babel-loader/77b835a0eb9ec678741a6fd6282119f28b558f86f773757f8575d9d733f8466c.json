{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\OneDrive - Universidad Autonoma de Occidente\\\\Personal\\\\Documentos personales\\\\Cursos\\\\Platzi\\\\Intro React.js\\\\react-intro-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import './App.css';\nimport React, { useState } from \"react\";\nimport { CreateTodoButton } from \"./CreateTodoButton\";\nimport { TodoCounter } from \"./TodoCounter\";\nimport { TodoItem } from \"./TodoItem\";\nimport { TodoList } from \"./TodoList\";\nimport { TodoSearch } from \"./TodoSearch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultTodos = [{\n  text: 'Cortar cebolla',\n  completed: true\n}, {\n  text: 'Tomar el curso de intro a React.js',\n  completed: true\n}, {\n  text: 'Hacer ejercicio',\n  completed: false\n}, {\n  text: 'Trapear la casa',\n  completed: false\n}];\nfunction App() {\n  _s();\n  // Comentarios de teoría\n  /*\n  \"props\" nos permite obtener todas las propiedades que se le pasen al componente desde el index o el otro documento desde donde se esté llamando\n  Propiedades para obtener propiedades\n  props.nombreProp -> nos permite obtener la propiedad particular que requerimos.\n  props.children -> nos permite obtener los elementos hijos que se estén renderizando dentro del componente desde el otro documento.\n  */\n\n  const [todos, setTodos] = useState(defaultTodos);\n  const [searchValue, setSearchValue] = useState('');\n  const completedTodos = todos.filter(todo => !!todo.completed).length;\n  const totalTodos = todos.length;\n  let searchedTodos = [];\n\n  // Este condicional permite que, dependiendo del input que el usuario digite, se filtre el arreglo de todo's.\n  // Una vez se encuentran similitudes entre algún (o algunos) elemento(s) del arreglo, se muestran estos en la UI.\n  // Si no se está realizando ninguna búsqueda, ...\n  // ... se seguirán renderizando todos los elementos que estén actualmente en el array.\n\n  if (!searchValue.length >= 1) {\n    searchedTodos = todos;\n  } else {\n    searchedTodos = todos.filter(todo => {\n      const todoText = todo.text.toLowerCase();\n      const searchText = searchValue.toLowerCase();\n      return todoText.includes(searchText);\n    });\n  }\n\n  // Función para marcar los TODOs como completados\n\n  const completeTodos = text => {};\n  return (\n    /*#__PURE__*/\n    // El React.Fragment es un componente invisible que permite realizar todos los cálculos internos sin afectar la UI de nuestra APP.\n    _jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TodoCounter, {\n        total: totalTodos,\n        completed: completedTodos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TodoSearch, {\n        searchValue: searchValue,\n        setSearchValue: setSearchValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n        children: todos.map(todo => /*#__PURE__*/_jsxDEV(TodoItem, {\n          text: todo.text,\n          completed: todo.completed\n        }, todo.text, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CreateTodoButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(App, \"OGMHQXAjvuOGZdqUUooJQ35j+r8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CreateTodoButton","TodoCounter","TodoItem","TodoList","TodoSearch","defaultTodos","text","completed","App","todos","setTodos","searchValue","setSearchValue","completedTodos","filter","todo","length","totalTodos","searchedTodos","todoText","toLowerCase","searchText","includes","completeTodos","map"],"sources":["C:/Users/Daniel/OneDrive - Universidad Autonoma de Occidente/Personal/Documentos personales/Cursos/Platzi/Intro React.js/react-intro-project/src/App.js"],"sourcesContent":["// import './App.css';\nimport React, { useState } from \"react\";\nimport { CreateTodoButton } from \"./CreateTodoButton\";\nimport { TodoCounter } from \"./TodoCounter\";\nimport { TodoItem } from \"./TodoItem\";\nimport { TodoList } from \"./TodoList\";\nimport { TodoSearch } from \"./TodoSearch\";\n\nconst defaultTodos = [\n  { text: 'Cortar cebolla', completed: true },\n  { text: 'Tomar el curso de intro a React.js', completed: true },\n  { text: 'Hacer ejercicio', completed: false },\n  { text: 'Trapear la casa', completed: false },\n]\n\nfunction App() {\n  // Comentarios de teoría\n  /*\n  \"props\" nos permite obtener todas las propiedades que se le pasen al componente desde el index o el otro documento desde donde se esté llamando\n  Propiedades para obtener propiedades\n  props.nombreProp -> nos permite obtener la propiedad particular que requerimos.\n  props.children -> nos permite obtener los elementos hijos que se estén renderizando dentro del componente desde el otro documento.\n  */\n\n  const [todos, setTodos] = useState(defaultTodos)\n  const [searchValue, setSearchValue] = useState('')\n\n  const completedTodos = todos.filter(todo => !!todo.completed).length\n  const totalTodos = todos.length\n\n  let searchedTodos = []\n\n  // Este condicional permite que, dependiendo del input que el usuario digite, se filtre el arreglo de todo's.\n  // Una vez se encuentran similitudes entre algún (o algunos) elemento(s) del arreglo, se muestran estos en la UI.\n  // Si no se está realizando ninguna búsqueda, ...\n  // ... se seguirán renderizando todos los elementos que estén actualmente en el array.\n\n  if (!searchValue.length >= 1) {\n    searchedTodos = todos\n  } else {\n    searchedTodos = todos.filter(todo => {\n      const todoText = todo.text.toLowerCase()\n      const searchText = searchValue.toLowerCase()\n      return todoText.includes(searchText)\n    })\n  }\n\n  // Función para marcar los TODOs como completados\n\n  const completeTodos = (text) => {\n    \n  }\n\n  return (\n    // El React.Fragment es un componente invisible que permite realizar todos los cálculos internos sin afectar la UI de nuestra APP.\n    <React.Fragment>\n      <TodoCounter total={totalTodos} completed={completedTodos} />\n      <TodoSearch searchValue={searchValue} setSearchValue={setSearchValue} />\n      <TodoList>\n        {todos.map(todo => (\n          <TodoItem key={todo.text} text={todo.text} completed={todo.completed} />\n        ))}\n      </TodoList>\n      <CreateTodoButton />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,UAAU,QAAQ,cAAc;AAAC;AAE1C,MAAMC,YAAY,GAAG,CACnB;EAAEC,IAAI,EAAE,gBAAgB;EAAEC,SAAS,EAAE;AAAK,CAAC,EAC3C;EAAED,IAAI,EAAE,oCAAoC;EAAEC,SAAS,EAAE;AAAK,CAAC,EAC/D;EAAED,IAAI,EAAE,iBAAiB;EAAEC,SAAS,EAAE;AAAM,CAAC,EAC7C;EAAED,IAAI,EAAE,iBAAiB;EAAEC,SAAS,EAAE;AAAM,CAAC,CAC9C;AAED,SAASC,GAAG,GAAG;EAAA;EACb;EACA;AACF;AACA;AACA;AACA;AACA;;EAEE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAACM,YAAY,CAAC;EAChD,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMc,cAAc,GAAGJ,KAAK,CAACK,MAAM,CAACC,IAAI,IAAI,CAAC,CAACA,IAAI,CAACR,SAAS,CAAC,CAACS,MAAM;EACpE,MAAMC,UAAU,GAAGR,KAAK,CAACO,MAAM;EAE/B,IAAIE,aAAa,GAAG,EAAE;;EAEtB;EACA;EACA;EACA;;EAEA,IAAI,CAACP,WAAW,CAACK,MAAM,IAAI,CAAC,EAAE;IAC5BE,aAAa,GAAGT,KAAK;EACvB,CAAC,MAAM;IACLS,aAAa,GAAGT,KAAK,CAACK,MAAM,CAACC,IAAI,IAAI;MACnC,MAAMI,QAAQ,GAAGJ,IAAI,CAACT,IAAI,CAACc,WAAW,EAAE;MACxC,MAAMC,UAAU,GAAGV,WAAW,CAACS,WAAW,EAAE;MAC5C,OAAOD,QAAQ,CAACG,QAAQ,CAACD,UAAU,CAAC;IACtC,CAAC,CAAC;EACJ;;EAEA;;EAEA,MAAME,aAAa,GAAIjB,IAAI,IAAK,CAEhC,CAAC;EAED;IAAA;IACE;IACA,QAAC,KAAK,CAAC,QAAQ;MAAA,wBACb,QAAC,WAAW;QAAC,KAAK,EAAEW,UAAW;QAAC,SAAS,EAAEJ;MAAe;QAAA;QAAA;QAAA;MAAA,QAAG,eAC7D,QAAC,UAAU;QAAC,WAAW,EAAEF,WAAY;QAAC,cAAc,EAAEC;MAAe;QAAA;QAAA;QAAA;MAAA,QAAG,eACxE,QAAC,QAAQ;QAAA,UACNH,KAAK,CAACe,GAAG,CAACT,IAAI,iBACb,QAAC,QAAQ;UAAiB,IAAI,EAAEA,IAAI,CAACT,IAAK;UAAC,SAAS,EAAES,IAAI,CAACR;QAAU,GAAtDQ,IAAI,CAACT,IAAI;UAAA;UAAA;UAAA;QAAA,QACzB;MAAC;QAAA;QAAA;QAAA;MAAA,QACO,eACX,QAAC,gBAAgB;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA;EACL;AAErB;AAAC,GAnDQE,GAAG;AAAA,KAAHA,GAAG;AAqDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}