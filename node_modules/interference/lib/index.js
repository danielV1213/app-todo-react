"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isInterference = exports.Interference = void 0;
const symInterference = Symbol.for('interference');
class Interference extends Error {
    constructor({ message, type, details = {}, statusCode }) {
        super(message);
        Object.setPrototypeOf(this, Interference.prototype);
        Object.defineProperty(this, symInterference, { value: true });
        Object.defineProperty(this, 'message', {
            configurable: true,
            enumerable: false,
            value: message,
            writable: true,
        });
        Object.defineProperty(this, 'name', {
            configurable: true,
            enumerable: false,
            value: this.constructor.name,
            writable: true,
        });
        this.type = type;
        this.details = details;
        this.statusCode = statusCode;
        if (Error.hasOwnProperty('captureStackTrace')) {
            Error.captureStackTrace(this, this.constructor);
            return;
        }
        Object.defineProperty(this, 'stack', {
            configurable: true,
            enumerable: false,
            value: new Error(message).stack,
            writable: true,
        });
    }
    toJSON() {
        return {
            type: this.type,
            message: this.message,
            details: this.details,
            statusCode: this.statusCode,
        };
    }
}
exports.Interference = Interference;
function isInterference(value) {
    return typeof value === 'object' && value !== null ? value[symInterference] === true : false;
}
exports.isInterference = isInterference;
function InterferenceFactory(options) {
    return new Interference(options);
}
exports.default = InterferenceFactory;
//# sourceMappingURL=index.js.map