"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.get = get;
exports.post = post;
exports.request = request;
exports.default = void 0;
var _methods = require("../methods");
var _contentTypes = require("../contentTypes");
var _headers = require("../headers");
var _http = require("../utilities/http");
function get(host, uri, query, headers, callback) {
    if (callback === undefined) {
        callback = headers; ///
        headers = {};
    }
    var method = _methods.GET_METHOD, accept = _contentTypes.APPLICATION_JSON_CONTENT_TYPE, content = null;
    underwriteAcceptHeader(headers, accept);
    request(host, uri, query, method, headers, content, callback);
}
function post(host, uri, query, headers, content, callback) {
    if (callback === undefined) {
        callback = content;
        content = headers;
        headers = {};
    }
    var method = _methods.POST_METHOD, accept = _contentTypes.APPLICATION_JSON_CONTENT_TYPE, contentType = _contentTypes.APPLICATION_JSON_CONTENT_TYPE;
    underwriteAcceptHeader(headers, accept);
    underwriteContentTypeHeader(headers, contentType);
    request(host, uri, query, method, headers, content, callback);
}
function request(host, uri, query, method, headers, content1, callback) {
    var url = (0, _http).urlFromHostURIAndQuery(host, uri, query), accept = headers[_headers.ACCEPT_HEADER] || null, contentType = headers[_headers.CONTENT_TYPE_HEADER] || null, xmlHttpRequest = new XMLHttpRequest();
    if (contentType === _contentTypes.APPLICATION_JSON_CONTENT_TYPE) {
        var json = content1, jsonString = JSON.stringify(json);
        content1 = jsonString; ///
    }
    xmlHttpRequest.onreadystatechange = function() {
        var readyState = xmlHttpRequest.readyState, status = xmlHttpRequest.status, response = xmlHttpRequest.response, statusCode = status;
        if (readyState == 4) {
            var content = response;
            if (accept === _contentTypes.APPLICATION_JSON_CONTENT_TYPE) {
                try {
                    var jsonString = content, json = JSON.parse(jsonString);
                    content = json; ///
                } catch (error) {
                    content = null;
                }
            }
            callback(content, statusCode);
        }
    };
    xmlHttpRequest.open(method, url);
    if (accept !== null) {
        xmlHttpRequest.setRequestHeader(_headers.ACCEPT_HEADER, accept);
    }
    if (contentType !== null) {
        xmlHttpRequest.setRequestHeader(_headers.CONTENT_TYPE_HEADER, contentType);
    }
    content1 !== null ? xmlHttpRequest.send(content1) : xmlHttpRequest.send();
}
var _default = {
    get: get,
    post: post,
    request: request
};
exports.default = _default;
function underwriteAcceptHeader(headers, accept) {
    var name = _headers.ACCEPT_HEADER, value = accept; ///
    (0, _http).underwrite(headers, name, value);
}
function underwriteContentTypeHeader(headers, contentTYpe) {
    var name = _headers.CONTENT_TYPE_HEADER, value = contentTYpe; ///
    (0, _http).underwrite(headers, name, value);
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,